apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: loving-montalcini-c86001
spec:
    name: dontcare
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: victorious-mcnulty-086001
spec:
    name: powerprice
    selected:
      - "28.0"
    type: constant
    values:
      - "28.0"
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: flamboyant-villani-c86001
spec:
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Volt
            name: "y"
            scale: linear
            suffix: ' V'
        colorizeRows: true
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        hoverDimension: auto
        kind: Single_Stat_Plus_Line
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Netzspannung
        opacity: 1
        orientationThreshold: 1e+08
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "grid_voltage")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
        staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
        suffix: ' V'
        width: 3
        xCol: _time
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Watt
            name: "y"
            scale: linear
            suffix: W
        colorizeRows: true
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 0
        height: 3
        hoverDimension: auto
        kind: Single_Stat_Plus_Line
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Ladeleistung
        opacity: 1
        orientationThreshold: 1e+08
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "phase_a_current" or r["_measurement"] == "phase_a_voltage" or r["_measurement"] == "phase_b_current" or r["_measurement"] == "phase_b_voltage" or r["_measurement"] == "phase_c_current" or r["_measurement"] == "phase_c_voltage")
                  |> filter(fn: (r) => r["_field"] == "gauge")
                  |> pivot(columnKey: ["_measurement"], rowKey: ["_time"], valueColumn: "_value" )
                  |> map(fn: (r) => ({ _time: r._time, _field: "power", _value: r.phase_a_voltage * r.phase_a_current + r.phase_b_voltage * r.phase_b_current + r.phase_c_voltage * r.phase_c_current}))
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
        staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
        suffix: ' W'
        width: 6
        widthRatio: 1
        xCol: _time
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Ampere
            name: "y"
            scale: linear
            suffix: ' A'
        colors:
          - hex: '#31C0F6'
            id: 07949f61-0a8f-419a-9388-39179e30ead3
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: 0efb3d65-6935-4d43-8f8b-ffcf22171cc8
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: 1e461dee-5380-4b3f-b095-7457eab61ebf
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Ampere
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "phase_a_current" or r["_measurement"] == "phase_b_current" or r["_measurement"] == "phase_c_current")
                  // or r["_measurement"] == "neutral_current"
                  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
                  |> yield(name: "last")
        staticLegend: {}
        width: 12
        xCol: _time
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Volt
            name: "y"
            scale: linear
            suffix: ' V'
        colors:
          - hex: '#31C0F6'
            id: 07949f61-0a8f-419a-9388-39179e30ead3
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: 0efb3d65-6935-4d43-8f8b-ffcf22171cc8
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: 1e461dee-5380-4b3f-b095-7457eab61ebf
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Volts
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "phase_a_voltage" or r["_measurement"] == "phase_b_voltage" or r["_measurement"] == "phase_c_voltage")
                  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
                  |> yield(name: "last")
        staticLegend: {}
        width: 12
        xCol: _time
        yCol: _value
        yPos: 10
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Herz
            name: "y"
            scale: linear
            suffix: ' Hz'
        colorizeRows: true
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        hoverDimension: auto
        kind: Single_Stat_Plus_Line
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Netzfrequenz
        opacity: 1
        orientationThreshold: 1e+08
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "grid_frequency")
                  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
                  |> yield(name: "last")
        staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
        suffix: ' Hz'
        width: 3
        xCol: _time
        xPos: 3
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Verladene Energie
            name: "y"
            scale: linear
            suffix: ' kWh'
        colorizeRows: true
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 0
        height: 3
        hoverDimension: auto
        kind: Single_Stat_Plus_Line
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Abgegebene Energie
        opacity: 1
        orientationThreshold: 1e+08
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "dispensed_energy")
                  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
                    |> map(fn: (r) => ({
                      r with
                      _value: r._value / 1000.0
                    })
                  )
                  |> yield(name: "last")
        staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
        suffix: ' kWh'
        width: 3
        xCol: _time
        xPos: 6
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Temperatur
            name: "y"
            scale: linear
            suffix: ' Â°C'
        colorizeRows: true
        colors:
          - hex: '#31C0F6'
            id: 591c8bb7-bd97-482c-a94e-8fd5bae184f3
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: b92a6558-36dd-4d91-9dfd-582e2c128329
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: d87d4e4d-e334-41a4-9907-5a01527e859d
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Temperatur
        opacity: 1
        orientationThreshold: 1e+08
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "handle_temperature" or r["_measurement"] == "mcu_temperature" or r["_measurement"] == "pcb_temperature")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> map(fn: (r) => ({ _time: r._time, _value: r._value, _measurement:
                    if r._measurement == "mcu_temperature" then "Mikrocontroller"
                    else if r._measurement == "handle_temperature" then "Griff"
                    else if r._measurement == "pcb_temperature" then "Platine"
                    else "unbekannt"}))
                  |> yield(name: "mean")
        staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
        width: 3
        xCol: _time
        xPos: 6
        yCol: _value
        yPos: 3
        yTickStep: 1
        yTotalTicks: 20
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat
        name: Kosten
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "dispensed_energy")
                  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)
                    |> map(fn: (r) => ({
                      r with
                      _value: r._value / 1000.0 * float(v: v.powerprice) / 100.0
                    })
                  )
                  |> yield(name: "last")
        staticLegend: {}
        suffix: ' â¬'
        width: 3
        xPos: 9
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: "y"
            scale: linear
        colors:
          - hex: '#31C0F6'
            id: 591c8bb7-bd97-482c-a94e-8fd5bae184f3
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: b92a6558-36dd-4d91-9dfd-582e2c128329
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: d87d4e4d-e334-41a4-9907-5a01527e859d
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Auto verbunden und Kontakt geschlossen
        position: overlaid
        queries:
          - query: |-
                from(bucket: "dontcare")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "contactor_closed" or r["_measurement"] == "vehicle_connected")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
        staticLegend: {}
        width: 3
        xCol: _time
        xPos: 9
        yCol: _value
        yPos: 3
    name: Tesla Wallbox
